! A synthetic example using cases.  This is mostly use to test
! that the parser is handling the cases=... option correctly.

module test_cases
   use pfunit
   implicit none

   @testParameter
   type, extends (AbstractTestParameter) :: MyParamType
      integer :: i
   contains
      procedure :: toString
   end type MyParamType

   @testCase(testParameters={getParameters()}, constructor=newMyTestCase)
   type, extends (ParameterizedTestCase) :: MyTestCase
      type(MyParamType) :: param
   end type MyTestCase

contains

   function newMyTestCase(param)
      type (MyTestCase) :: newMyTestCase
      type (MyParamType) :: param

      newMyTestCase%param = param

   end function newMyTestCase

   @test
   subroutine test_odd(this)
      class  (MyTestCase), intent(inout) :: this

      @assertEqual(1,mod(this%param%i,2))

   end subroutine test_odd

   function getParameters() result(params)
     type(MyParamType), allocatable :: params(:)
     params = [MyParamType(3),MyParamType(5),MyParamType(7)]
   end function getParameters

   @test
   subroutine test_even(this)
      class  (MyTestCase), intent(inout) :: this

      @assertEqual(0, mod(this%param%i,2))

   end subroutine test_even

   function toString(this) result(string)
      class (MyParamType), intent(in) :: this
      character(:), allocatable :: string
      character(len=3) :: str

      write(str,'(i0)') this%i
      string = str
   end function toString

end module test_cases
